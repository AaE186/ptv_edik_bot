from telegram import Update
from telegram.ext import Application, MessageHandler, CommandHandler, filters, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta
import json
import os

# ======== –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —É —Ç–µ–±—è) =========
target_users = {
    "all": [
        "@nknwn86", #–≠–¥–∏–∫ –ê–±–∏–ª–æ–≤
        "@r_shrlv", #–†–æ—è–ª –®–∏—Ä–∞–ª–∏–µ–≤
        "@miiglluna", #–ú–∏–ª–µ–Ω–∞
        "@Linzhy13", #–ê–Ω–∂–µ–ª–∏–∫–∞ –î–æ–ª–≥–∞—á–µ–≤–∞
        "@Ikc0ta", #–ò—Å–∞
        "@derlegen", #–ö–∞—Ç—è –°–∏–º–æ–Ω–æ–≤–∞
        "@Friderico_dourden", #–§–µ–¥–æ—Ä –®–∞–ª—è–ø–∏–Ω
        "@maximoffn", # –ù–∏–∫–∏—Ç–∞ –ú–∞–∫—Å–∏–º–æ–≤
        "@astor602", # –ê–Ω—Ç–æ–Ω –ë–æ–ª—å—à–µ–Ω–∫–æ–≤
        "@Nastya_Kosukhina", # –ù–∞—Å—Ç—è –ö–æ—Å—É—Ö–∏–Ω–∞
        "@moarit", #–ó–ª–∞—Ç–∞ –î—Ä—é–ø–∏–Ω–∞
        "@vladysham", #–í–ª–∞–¥ –ú–µ–ª—å–Ω–∏–∫–æ–≤
        "@by_gelechka", #–ê–Ω–≥–µ–ª–∏–Ω–∞ –ì–æ—Ä–µ–ª–æ–≤–∞
        "@Maksimon777", #–ù–æ–≤–∏–∫–æ–≤ –ú–∞–∫—Å–∏–º
        "@alexa_vasyaeva" # –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –í–∞—Å—è–µ–≤–∞
        '@yvslk', #–Ø–Ω–∞ –í–∞—Å–∏–ª—å—á–µ–Ω–∫–æ
        "@merkovi", #–ö–æ–º–µ–Ω–¥—Ä–æ–≤—Å–∫–∞—è –ú–∞—Ä–∏—è
        "@nastya3_56", #–ê–Ω–∞—Å—Ç–∞—Å–∏—è –ú–∞—Ä–≥–∞—à–æ–≤–∞
        "@yulshhhh", #–Æ–ª–∏—è –®—É–ª–µ–∫–∏–Ω–∞
        "@poliana_aa", #–ü–æ–ª–∏–Ω–∞ –•–æ–º—É—Ç–æ–≤—Å–∫–∞—è
        "@Alkvlo", # –ü–æ–ª–∏–Ω–∞ –Ø–∫–æ–≤–ª–µ–≤–∞
        "@ssorelss", #C–æ—Ñ–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞
        "@min_sai", #–í–∏–∫–∞ –ì—Ä–∞—á–µ–≤–∞
        "@Tuturukhekhe", #–ò—Ä–∞ –ì—Ä–µ–¥–Ω–µ–≤–∞
        "@marieta_v7", #–ú–∞—Ä–∏–µ—Ç—Ç–∞
        "@b1ack_dah1ia", #–ê–ª–µ–Ω–∞ –ö–æ—Å—Ç—è–µ–≤–∞
        "@speculum_59", #–í–ª–∞–¥–∏–º–∏—Ä –ü–µ—Ä–µ–¥–µ—Ä–∏–Ω
        "@D1am0nd_30", #–°–µ—Ä–µ–≥–∞ –¶—ã–≥–ª–∏–Ω
        "@fjggkfg", #–í–∏—Ç—è –ñ–µ–ª—É–Ω–∏—Ü—ã–Ω
        "@Lancer_999", #–ï–≥–æ—Ä –ë—Ä–∞–≥–∏–Ω
        "@aa1esya", #–ê–ª–µ—Å—è –ê–ª–ª–æ
    ],
    "photo": [
        "@miiglluna",
        "@derlegen",
        "@FLYINGeyesOFFICIAL21"
    ],
    "designer": [
        "@Ikc0ta",
        "@maximoffn"
    ],
    "copy": [
        "@alexa_vasyaeva",
        "@astor602",
        "aaaaa",
    ],
    "video": [
        "@Friderico_dourden",
        "@r_shrlv"
    ],
    "admin": [
        "@Maksimon777"
    ],
    "katyasimonova": [
        "@maximoffn"
    ]
}

# ======== –§–ê–ô–õ –° –î–ï–î–õ–ê–ô–ù–ê–ú–ò =========
TASKS_FILE = 'deadlines.json'
if not os.path.exists(TASKS_FILE):
    with open(TASKS_FILE, 'w') as f:
        json.dump([], f)

# ======== –£–ü–û–ú–ò–ù–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô =========
async def mention_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    command = text.lstrip('@')
    users = target_users.get(command)
    if not users:
        await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{command}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    mentions = ' '.join(users)
    await update.message.reply_text(f"–í–Ω–∏–º–∞–Ω–∏–µ {command}! {mentions}")

# ======== –î–û–ë–ê–í–õ–ï–ù–ò–ï –î–ï–î–õ–ê–ô–ù–ê =========
async def add_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        parts = update.message.text.split('|')
        task_text = parts[0].replace('/–¥–µ–¥–ª–∞–π–Ω', '').strip()
        date_str = parts[1].strip()
        responsible = parts[2].strip()
        deadline = datetime.strptime(date_str, '%Y-%m-%d')

        with open(TASKS_FILE, 'r') as f:
            tasks = json.load(f)

        tasks.append({
            'task': task_text,
            'deadline': date_str,
            'responsible': responsible,
            'chat_id': update.message.chat_id
        })

        with open(TASKS_FILE, 'w') as f:
            json.dump(tasks, f, indent=2)

        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ:\nüìå {task_text}\nüìÖ –î–æ: {date_str}\nüë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {responsible}")
    except:
        await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç:\n`/–¥–µ–¥–ª–∞–π–Ω –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ | –ì–ì–ì–ì-–ú–ú-–î–î | @username`", parse_mode='Markdown')

# ======== –ü–†–û–°–ú–û–¢–† –í–°–ï–• –î–ï–î–õ–ê–ô–ù–û–í =========
async def list_deadlines(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open(TASKS_FILE, 'r') as f:
        tasks = json.load(f)
    if not tasks:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤.")
        return
    msg = "üìã –¢–µ–∫—É—â–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã:\n"
    for i, task in enumerate(tasks, 1):
        msg += f"\n{i}. üìå {task['task']} ‚Äî üóì {task['deadline']} ‚Äî üë§ {task['responsible']}"
    await update.message.reply_text(msg)

# ======== –£–î–ê–õ–ï–ù–ò–ï –î–ï–î–õ–ê–ô–ù–ê =========
async def delete_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        n = int(update.message.text.split()[1])
        with open(TASKS_FILE, 'r') as f:
            tasks = json.load(f)
        if 1 <= n <= len(tasks):
            deleted = tasks.pop(n - 1)
            with open(TASKS_FILE, 'w') as f:
                json.dump(tasks, f, indent=2)
            await update.message.reply_text(f"üóë –£–¥–∞–ª–µ–Ω–æ: {deleted['task']}")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
    except:
        await update.message.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π: `/—É–¥–∞–ª–∏—Ç—å –ù–æ–º–µ—Ä`", parse_mode='Markdown')

# ======== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –î–ï–î–õ–ê–ô–ù–ê =========
async def edit_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        parts = update.message.text.replace('/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', '', 1).strip().split('|')
        index = int(parts[0].strip()) - 1
        task_text = parts[1].strip()
        date_str = parts[2].strip()
        responsible = parts[3].strip()
        deadline = datetime.strptime(date_str, '%Y-%m-%d')

        with open(TASKS_FILE, 'r') as f:
            tasks = json.load(f)

        tasks[index] = {
            'task': task_text,
            'deadline': date_str,
            'responsible': responsible,
            'chat_id': update.message.chat_id
        }

        with open(TASKS_FILE, 'w') as f:
            json.dump(tasks, f, indent=2)

        await update.message.reply_text(f"‚úè –û–±–Ω–æ–≤–ª–µ–Ω–æ:\nüìå {task_text}\nüìÖ –î–æ: {date_str}\nüë§ {responsible}")
    except:
        await update.message.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π:\n`/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ù–æ–º–µ—Ä | –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç | –ì–ì–ì–ì-–ú–ú-–î–î | @username`", parse_mode='Markdown')

# ======== –ù–ê–ü–û–ú–ò–ù–ê–õ–ö–ê =========
async def check_deadlines(app: Application):
    with open(TASKS_FILE, 'r') as f:
        tasks = json.load(f)
    now = datetime.now()
    for task in tasks:
        deadline = datetime.strptime(task['deadline'], '%Y-%m-%d')
        days_left = (deadline - now).days
        if days_left in [7, 3, 1]:
            try:
                await app.bot.send_message(
                    chat_id=task['chat_id'],
                    text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n{task['responsible']}, –¥–µ–¥–ª–∞–π–Ω –ø–æ –∑–∞–¥–∞—á–µ: \"{task['task']}\" ‚Äî –¥–æ {task['deadline']}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# ======== –ó–ê–ü–£–°–ö =========
def main():
    BOT_TOKEN = "8265575566:AAEpgUGCGkzwaq99JGIaWko4g6y4mGW8ACA"
    app = Application.builder().token(BOT_TOKEN).build()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    commands = list(target_users.keys())
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^@(' + '|'.join(cmd for cmd in commands) + r')\b'), mention_category))
    app.add_handler(CommandHandler("deadline", add_deadline))
    app.add_handler(CommandHandler("deadlines", list_deadlines))
    app.add_handler(CommandHandler("delete", delete_deadline))
    app.add_handler(CommandHandler("edit", edit_deadline))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = BackgroundScheduler()
    scheduler.add_job(lambda: app.create_task(check_deadlines(app)), 'interval', hours=24)
    scheduler.start()

    app.run_polling()

if __name__ == '__main__':
    main()
