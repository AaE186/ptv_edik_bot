from telegram import Update, BotCommand
from telegram.ext import Application, MessageHandler, CommandHandler, filters, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
import json
import os
import asyncio

# ======== –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =========
target_users = {
    "all": [
        "@nknwn86", "@r_shrlv", "@miiglluna", "@Linzhy13", "@Ikc0ta", "@derlegen",
        "@Friderico_dourden", "@maximoffn", "@astor602", "@Nastya_Kosukhina",
        "@moarit", "@vladysham", "@by_gelechka", "@Maksimon777", "@alexa_vasyaeva",
        '@yvslk', "@merkovi", "@nastya3_56", "@yulshhhh", "@poliana_aa", "@Alkvlo",
        "@ssorelss", "@min_sai", "@Tuturukhekhe", "@marieta_v7", "@b1ack_dah1ia",
        "@speculum_59", "@D1am0nd_30", "@fjggkfg", "@Lancer_999", "@aa1esya",
    ],
    "photo": ["@miiglluna", "@derlegen", "@FLYINGeyesOFFICIAL21"],
    "designer": ["@Ikc0ta", "@maximoffn"],
    "copy": ["@alexa_vasyaeva", "@astor602", "aaaaa"],
    "video": ["@Friderico_dourden", "@r_shrlv"],
    "admin": ["@Maksimon777"],
    "katyasimonova": ["@maximoffn"]
}

# ======== –§–ê–ô–õ –° –î–ï–î–õ–ê–ô–ù–ê–ú–ò =========
TASKS_FILE = 'deadlines.json'
if not os.path.exists(TASKS_FILE):
    with open(TASKS_FILE, 'w') as f:
        json.dump([], f)

# ======== –§–£–ù–ö–¶–ò–ò =========

async def mention_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().lstrip('@')
    users = target_users.get(text)
    if not users:
        await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    mentions = ' '.join(users)
    await update.message.reply_text(f"–í–Ω–∏–º–∞–Ω–∏–µ {text}! {mentions}")

async def add_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        parts = update.message.text.split('|')
        task_text = parts[0].replace('/–¥–µ–¥–ª–∞–π–Ω', '').strip()
        date_str = parts[1].strip()
        responsible = parts[2].strip()
        datetime.strptime(date_str, '%Y-%m-%d')  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã

        with open(TASKS_FILE, 'r') as f:
            tasks = json.load(f)

        tasks.append({
            'task': task_text,
            'deadline': date_str,
            'responsible': responsible,
            'chat_id': update.message.chat_id
        })

        with open(TASKS_FILE, 'w') as f:
            json.dump(tasks, f, indent=2)

        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ:\nüìå {task_text}\nüìÖ –î–æ: {date_str}\nüë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {responsible}")
    except Exception:
        await update.message.reply_text("‚ùóÔ∏è –§–æ—Ä–º–∞—Ç:\n`/–¥–µ–¥–ª–∞–π–Ω –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ | –ì–ì–ì–ì-–ú–ú-–î–î | @username`", parse_mode='Markdown')

async def list_deadlines(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open(TASKS_FILE, 'r') as f:
        tasks = json.load(f)
    if not tasks:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤.")
        return
    msg = "üìã –¢–µ–∫—É—â–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã:\n"
    for i, task in enumerate(tasks, 1):
        msg += f"\n{i}. üìå {task['task']} ‚Äî üóì {task['deadline']} ‚Äî üë§ {task['responsible']}"
    await update.message.reply_text(msg)

async def delete_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        n = int(update.message.text.split()[1])
        with open(TASKS_FILE, 'r') as f:
            tasks = json.load(f)
        if 1 <= n <= len(tasks):
            deleted = tasks.pop(n - 1)
            with open(TASKS_FILE, 'w') as f:
                json.dump(tasks, f, indent=2)
            await update.message.reply_text(f"üóë –£–¥–∞–ª–µ–Ω–æ: {deleted['task']}")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
    except Exception:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /—É–¥–∞–ª–∏—Ç—å –ù–æ–º–µ—Ä", parse_mode='Markdown')

async def edit_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        parts = update.message.text.replace('/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', '', 1).strip().split('|')
        index = int(parts[0].strip()) - 1
        task_text = parts[1].strip()
        date_str = parts[2].strip()
        responsible = parts[3].strip()
        datetime.strptime(date_str, '%Y-%m-%d')

        with open(TASKS_FILE, 'r') as f:
            tasks = json.load(f)

        tasks[index] = {
            'task': task_text,
            'deadline': date_str,
            'responsible': responsible,
            'chat_id': update.message.chat_id
        }

        with open(TASKS_FILE, 'w') as f:
            json.dump(tasks, f, indent=2)

        await update.message.reply_text(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ:\nüìå {task_text}\nüìÖ –î–æ: {date_str}\nüë§ {responsible}")
    except Exception:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π:\n`/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ù–æ–º–µ—Ä | –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç | –ì–ì–ì–ì-–ú–ú-–î–î | @username`", parse_mode='Markdown')

async def check_deadlines(app: Application):
    with open(TASKS_FILE, 'r') as f:
        tasks = json.load(f)
    now = datetime.now()
    for task in tasks:
        deadline = datetime.strptime(task['deadline'], '%Y-%m-%d')
        days_left = (deadline - now).days
        if days_left in [7, 3, 1]:
            try:
                await app.bot.send_message(
                    chat_id=task['chat_id'],
                    text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n{task['responsible']}, –¥–µ–¥–ª–∞–π–Ω –ø–æ –∑–∞–¥–∞—á–µ: \"{task['task']}\" ‚Äî –¥–æ {task['deadline']}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commands_list = [
        "/–¥–µ–¥–ª–∞–π–Ω –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ | –ì–ì–ì–ì-–ú–ú-–î–î | @username ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω",
        "/deadlines ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–µ–¥–ª–∞–π–Ω—ã",
        "/—É–¥–∞–ª–∏—Ç—å –ù–æ–º–µ—Ä ‚Äî —É–¥–∞–ª–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω",
        "/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ù–æ–º–µ—Ä | –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç | –ì–ì–ì–ì-–ú–ú-–î–î | @username ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω",
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≥—Ä—É–ø–ø: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ @all, @photo –∏ —Ç.–ø."
    ]
    await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + "\n".join(commands_list))

async def set_bot_commands(app: Application):
    commands = [
        BotCommand("deadline", "–î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω"),
        BotCommand("deadlines", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–µ–¥–ª–∞–π–Ω—ã"),
        BotCommand("delete", "–£–¥–∞–ª–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω –ø–æ –Ω–æ–º–µ—Ä—É"),
        BotCommand("edit", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω"),
        BotCommand("help", "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
    ]
    await app.bot.set_my_commands(commands)

# ======== –ó–ê–ü–£–°–ö –ë–û–¢–ê =========
def main():
    BOT_TOKEN = "8265575566:AAEpgUGCGkzwaq99JGIaWko4g6y4mGW8ACA"
    app = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    categories = list(target_users.keys())
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^@(' + '|'.join(categories) + r')\b'), mention_category))

    app.add_handler(CommandHandler("deadline", add_deadline))
    app.add_handler(CommandHandler("deadlines", list_deadlines))
    app.add_handler(CommandHandler("delete", delete_deadline))
    app.add_handler(CommandHandler("edit", edit_deadline))
    app.add_handler(CommandHandler("help", show_help))

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling)
    import asyncio
    asyncio.get_event_loop().run_until_complete(set_bot_commands(app))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    scheduler = BackgroundScheduler()
    scheduler.add_job(lambda: asyncio.create_task(check_deadlines(app)), 'interval', hours=24)
    scheduler.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
